---
- name: Add cert-manager helm repo
  kubernetes.core.helm_repository:
    name: jetstack
    repo_url: https://charts.jetstack.io

# Installation des CRDs indépendamment du chart helm.
# Recommandé en production.
# Voir : https://cert-manager.io/docs/installation/helm
- name: Download cert-manager CRDs
  ansible.builtin.uri:
    url: https://github.com/cert-manager/cert-manager/releases/download/{{ dsc.certmanager.chartVersion }}/cert-manager.crds.yaml
    return_content: true
  register: cert_manager_crds

- name: Apply CRDs
  kubernetes.core.k8s:
    state: present
    definition: "{{ cert_manager_crds.content | from_yaml_all }}"

- name: Set cert-manager helm values
  ansible.builtin.set_fact:
    cm_values: {}

- name: Merge with proxy settings
  when: dsc.proxy.enabled
  block:
    - name: Generate proxy values
      ansible.builtin.set_fact:
        cm_proxy_values: "{{ lookup('template', 'proxy-values.yaml.j2') | from_yaml }}"
    - name: Merge with cm proxy values
      ansible.builtin.set_fact:
        cm_values: "{{ cm_values | combine(cm_proxy_values, recursive=True, list_merge='append') }}"

- name: Deploy helm
  kubernetes.core.helm:
    #    force: true
    name: cert-manager
    chart_ref: jetstack/cert-manager
    chart_version: "{{ dsc.certmanager.chartVersion }}"
    release_namespace: cert-manager
    create_namespace: true
    values: "{{ cm_values }}"

- name: Wait cert-manager to initialize
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: cert-manager
    name: cert-manager-webhook
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0] is defined
  retries: 15
  delay: 5

- name: Create Let's Encrypt ClusterIssuer
  kubernetes.core.k8s:
    state: present
    template: cluster-issuer-acme.j2
  when: dsc.ingress.tls.type == 'acme'

- name: Create CA ClusterIssuer
  kubernetes.core.k8s:
    state: present
    template: cluster-issuer-ca.j2
  when: dsc.ingress.tls.type == 'ca'
