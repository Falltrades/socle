- name: Check cert-manager deployment
  kubernetes.core.k8s_info:
    kind: Deployment
    namespace: cert-manager
    name: cert-manager-webhook
  register: cert_manager_webhook

- name: Download cert-manager
  ansible.builtin.uri:
    url: "https://github.com/cert-manager/cert-manager/releases/download/{{ dsc.certmanager.version }}/cert-manager.yaml"
    return_content: true
  register: cert_manifest

- name: Edit manifest
  ansible.builtin.set_fact:
    manifest: "{{ cert_manifest.content | from_yaml_all | custom_cert_manager(envs) }}"
  vars:
    envs:
      - name: http_proxy
        value: "{{ dsc.proxy.http_proxy }}"
      - name: https_proxy
        value: "{{ dsc.proxy.https_proxy }}"
      - name: no_proxy
        value: "{{ dsc.proxy.no_proxy }}"
  when: dsc.proxy.enabled

- name: Apply cert-manager
  kubernetes.core.k8s:
    state: present
    definition: "{{ manifest | default(cert_manifest.content | from_yaml_all) }}"

- name: Wait cert-manager to initialize
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: cert-manager
    name: cert-manager-webhook
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0] is defined
  retries: 15
  delay: 5

- name: Create Let's Encrypt ClusterIssuer
  kubernetes.core.k8s:
    state: present
    template: cluster-issuer-acme.j2
  when: dsc.ingress.tls.type == 'acme'

- name: Create CA ClusterIssuer
  kubernetes.core.k8s:
    state: present
    template: cluster-issuer-ca.j2
  when: dsc.ingress.tls.type == 'ca'
