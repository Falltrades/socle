---
- name: Create nexus Namespace
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        creationTimestamp:
        name: "{{ dsc.nexus.namespace }}"

- name: Create nexus Service Account
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: nexus-sa
        namespace: "{{ dsc.nexus.namespace }}"

- name: Manage PVC
  ansible.builtin.include_tasks:
    file: manage-pvc.yaml

- name: Deploy nexus
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - nexus.yml.j2
    - ingress.yml.j2

- name: Find nexus admin password in inventory
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: ConfigMap
    name: dso-config
  register: ansible_inventory

- name: Cache admin password
  ansible.builtin.set_fact:
    nexus_admin_password: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD }}"
  register: set_nx_pass
  when: ansible_inventory.resources | length > 0 and ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD is defined

- name: Find password in container
  when: set_nx_pass.skipped is defined and set_nx_pass.skipped
  block:
    - name: Wait nexus to initialize
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ dsc.nexus.namespace }}"
        name: nexus
      register: endpoint
      until: endpoint.resources[0].subsets is defined and endpoint.resources[0].subsets | selectattr('addresses')
      retries: 30
      delay: 5

    - name: Get nexus pod's name
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ dsc.nexus.namespace }}"
        name: nexus
      register: nx_ep

    - name: Set nx_pod
      ansible.builtin.set_fact:
        nx_pod: "{{ nx_ep.resources[0].subsets[0].addresses[0].targetRef.name }}"

    - name: Récupération du compte admin
      kubernetes.core.k8s_exec:
        pod: "{{ nx_pod }}"
        namespace: "{{ dsc.nexus.namespace }}"
        command: cat /nexus-data/admin.password
      register: admin_account
      until: admin_account.stdout is defined and admin_account.stdout
      retries: 15
      delay: 12

    - name: Set nexus password from cat
      ansible.builtin.set_fact:
        nexus_admin_password: "{{ admin_account.stdout }}"

    - name: Generate random password
      ansible.builtin.set_fact:
        new_pass: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"

    - name: Change nexus password
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        force_basic_auth: true
        url: https://{{ nexus_domain }}/service/rest/v1/security/users/admin/change-password
        method: PUT
        user: admin
        password: "{{ nexus_admin_password }}"
        body: "{{ new_pass }}"
        body_format: raw
        headers:
          Content-Type: text/plain
        status_code: [204, 503]
      until: update_nexus_pass.status == 204
      register: update_nexus_pass
      retries: 10
      delay: 12

    - name: Update inventory
      kubernetes.core.k8s:
        kind: ConfigMap
        name: dso-config
        namespace: "{{ dsc.console.namespace }}"
        state: patched
        definition:
          data:
            NEXUS_ADMIN_PASSWORD: "{{ new_pass }}"

- name: Get inventory
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: ConfigMap
    name: dso-config
  register: ansible_inventory

- name: Retrieve admin password from inventory
  ansible.builtin.set_fact:
    nexus_admin_password: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD }}"
  register: get_nx_pass

- name: Enable Anonymous access
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/security/anonymous
    method: PUT
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      enabled: true
      userId: anonymous
      realmName: NexusAuthorizingRealm
    body_format: json
    status_code: [200]

- name: Check if new-anon role already exists
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/security/roles/new-anon
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
    status_code: [200, 404]
  register: new_anon_role

- name: Create new-anon role
  when: new_anon_role.status == 404
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/security/roles
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      id: new-anon
      name: new-anon
      description: new-anon
      privileges:
        - nx-repository-view-docker-*-browse
        - nx-repository-view-docker-*-read
      roles: []
    body_format: json
    status_code: [200]
  register: create_role

- name: Get anonymous user
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/security/users?userId=anonymous&source=default
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
    status_code: [200]
  register: anon_user

- name: Update anonymous user with new-anon role
  when: (create_role is not failed) and not (anon_user.json[0].roles | regex_search('new-anon', multiline=True))
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/security/users/anonymous
    method: PUT
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      userId: anonymous
      firstName: Anonymous
      lastName: User
      emailAddress: anonymous@example.org
      source: default
      status: active
      readOnly: true
      roles:
        - new-anon
    body_format: json
    status_code: [204]

- name: Get Blob Stores
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/blobstores
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
    status_code: [200]
  register: blobstores

- name: Set dso_blobstore fact
  ansible.builtin.set_fact:
    dso_blobstore: "{{ blobstores.json
      | selectattr('name', 'contains', 'dso')
      | map(attribute='name') | first | default('') }}"

- name: Create dso Blob Store
  when: dso_blobstore != "dso"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/blobstores/file
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      softQuota:
        type: spaceRemainingQuota
        limit: 1073741824
      path: /nexus-data-docker/dso
      name: dso
    body_format: json
    status_code: [204]

# Create Cleanup policy and tasks

- name: Get nexus endpoint
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.nexus.namespace }}"
    name: nexus
  register: nexus_ep
  until: nexus_ep.resources[0].subsets[0].addresses[0] is defined
  retries: 15
  delay: 5

- name: Set nexus_pod
  ansible.builtin.set_fact:
    nexus_pod: "{{ nexus_ep.resources[0].subsets[0].addresses[0].targetRef.name }}"

- name: Get Nexus properties file backup
  kubernetes.core.k8s_exec:
    pod: "{{ nexus_pod }}"
    namespace: "{{ dsc.nexus.namespace }}"
    command: ls /nexus-data/etc/nexus.properties.bkp
  register: nx_prop_bkp
  ignore_errors: true

- name: Backup Nexus properties file
  when: nx_prop_bkp.rc != 0
  kubernetes.core.k8s_exec:
    pod: "{{ nexus_pod }}"
    namespace: "{{ dsc.nexus.namespace }}"
    command: cp -p /nexus-data/etc/nexus.properties /nexus-data/etc/nexus.properties.bkp

- name: Check scripts creation permission
  kubernetes.core.k8s_exec:
    pod: "{{ nexus_pod }}"
    namespace: "{{ dsc.nexus.namespace }}"
    command: grep 'nexus.scripts.allowCreation=true' /nexus-data/etc/nexus.properties
  register: nx_scripts_permission
  ignore_errors: true

- name: Allow scripts creation
  when: nx_scripts_permission.rc != 0
  kubernetes.core.k8s_exec:
    pod: "{{ nexus_pod }}"
    namespace: "{{ dsc.nexus.namespace }}"
    command: bash -c "echo -e 'nexus.scripts.allowCreation=true\n' >> /nexus-data/etc/nexus.properties"
  register: scripts_allowed

- name: Restart Nexus pod
  when: scripts_allowed is not skipped
  kubernetes.core.k8s:
    kind: Pod
    namespace: "{{ dsc.nexus.namespace }}"
    name: "{{ nexus_pod }}"
    state: absent

- name: Wait Nexus URL
  ansible.builtin.uri:
    url: https://{{ nexus_domain }}
    method: GET
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    status_code: [200, 202]
    return_content: false
  register: nexus_response
  until: nexus_response is not failed
  retries: 25
  delay: 5

- name: Get cleanup policy script
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/dso-docker-cleanup.json
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
  register: cleanup_policy_script
  ignore_errors: true

- name: Add cleanup policy script
  when: cleanup_policy_script.status != 200
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      name: dso-docker-cleanup.json
      content: |
        import org.sonatype.nexus.cleanup.storage.CleanupPolicyStorage

        def createPolicy (policyName) {
            try {
                def policyStorage = container.lookup(CleanupPolicyStorage.class.getName())
                def cleanupPolicy = policyStorage.newCleanupPolicy()
                cleanupPolicy.setName(policyName)
                cleanupPolicy.setNotes('')
                cleanupPolicy.setMode('deletion')
                cleanupPolicy.setFormat('docker')
                cleanupPolicy.setCriteria(['lastDownloaded':'2592000'])
                policyStorage.add(cleanupPolicy)
            } catch (e) {
                log.info("Cleanup policy already exists, skipping...")
            }
        }

        createPolicy('DSOdockerCleanupPolicy')
      type: "groovy"
    body_format: json
    status_code: [204]

- name: Run cleanup policy script
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/dso-docker-cleanup.json/run
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body: {}
    body_format: json
    status_code: [200]

- name: Get DSO tasks script
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/dso-tasks.json
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
  register: dso_tasks_script
  ignore_errors: true

- name: Add DSO tasks script
  when: dso_tasks_script.status != 200
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      name: dso-tasks.json
      content: |
        import org.sonatype.nexus.blobstore.api.BlobStoreManager
        import org.sonatype.nexus.scheduling.TaskConfiguration
        import org.sonatype.nexus.scheduling.TaskScheduler
        import org.sonatype.nexus.scheduling.schedule.Cron

        def createCompactBlobstoreTask(TaskScheduler taskScheduler) {
            TaskConfiguration taskConfiguration = taskScheduler.createTaskConfigurationInstance("blobstore.compact")
            taskConfiguration.name = "Compact Blob Stores"

            taskConfiguration.setString("blobstoreName", "dso")
            // TODO: taskConfiguration.setAlertEmail("TODO")
            taskScheduler.scheduleTask(
                taskConfiguration,
                new Cron(new Date().next(), "0 5 0 * * ?")
            )
            log.info("Task ${taskConfiguration.name} created")
        }

        def createCleanDockerUploadsTask(TaskScheduler taskScheduler) {
            TaskConfiguration taskConfiguration = taskScheduler.createTaskConfigurationInstance("repository.docker.upload-purge")
            taskConfiguration.name = "Clean Docker uploads"

            taskConfiguration.setString("age", "24")
            // TODO: taskConfiguration.setAlertEmail("TODO")
            taskScheduler.scheduleTask(
                taskConfiguration,
                new Cron(new Date().next(), "0 10 0 * * ?")
            )
            log.info("Task ${taskConfiguration.name} created")
        }

        def createCleanDockerUnusedStuffTask(TaskScheduler taskScheduler) {
            TaskConfiguration taskConfiguration = taskScheduler.createTaskConfigurationInstance("repository.docker.gc")
            taskConfiguration.name = "Clean Docker unused stuff"

            taskConfiguration.setString("repositoryName", "dso-dockerhub-proxy")
            taskConfiguration.setString("deployOffset", "24")
            // TODO: taskConfiguration.setAlertEmail("TODO")
            taskScheduler.scheduleTask(
                taskConfiguration,
                new Cron(new Date().next(), "0 15 0 * * ?")
            )
            log.info("Task ${taskConfiguration.name} created")
        }

        TaskScheduler taskScheduler = container.lookup(TaskScheduler.class)

        createCompactBlobstoreTask(taskScheduler)
        createCleanDockerUploadsTask(taskScheduler)
        createCleanDockerUnusedStuffTask(taskScheduler)
      type: "groovy"
    body_format: json
    status_code: [204]

- name: Run DSO tasks script
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/dso-tasks.json/run
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body: {}
    body_format: json
    status_code: [200]

- name: Get nexus endpoint
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.nexus.namespace }}"
    name: nexus
  register: nexus_ep
  until: nexus_ep.resources[0].subsets[0].addresses[0] is defined
  retries: 15
  delay: 5

- name: Set nexus_pod
  ansible.builtin.set_fact:
    nexus_pod: "{{ nexus_ep.resources[0].subsets[0].addresses[0].targetRef.name }}"

- name: Get Nexus properties backup file
  kubernetes.core.k8s_exec:
    pod: "{{ nexus_pod }}"
    namespace: "{{ dsc.nexus.namespace }}"
    command: ls /nexus-data/etc/nexus.properties.bkp
  register: nx_prop_bkp_file

- name: Restore original Nexus properties file
  when: nx_prop_bkp_file.rc == 0
  kubernetes.core.k8s_exec:
    pod: "{{ nexus_pod }}"
    namespace: "{{ dsc.nexus.namespace }}"
    command: mv /nexus-data/etc/nexus.properties.bkp /nexus-data/etc/nexus.properties

- name: Restart Nexus pod
  when: scripts_allowed is not skipped
  kubernetes.core.k8s:
    kind: Pod
    namespace: "{{ dsc.nexus.namespace }}"
    name: "{{ nexus_pod }}"
    state: absent

- name: Wait Nexus URL
  ansible.builtin.uri:
    url: https://{{ nexus_domain }}
    method: GET
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    status_code: [200, 202]
    return_content: false
  register: nexus_response
  until: nexus_response is not failed
  retries: 25
  delay: 5

# Create Docker Hub Proxy

- name: Get dso-dockerhub-proxy
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/repositories/docker/proxy/dso-dockerhub-proxy
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
    status_code: [200]
  register: dso_dockerhub_proxy
  ignore_errors: true

- name: Create Docker Proxy Repository
  when: dso_dockerhub_proxy.status == 404
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/repositories/docker/proxy
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      cleanup:
        policyNames:
          - DSOdockerCleanupPolicy
      docker:
        forceBasicAuth: false
        httpPort: 5000
        httpsPort: null
        subdomain: null
        v1Enabled: true
      dockerProxy:
        cacheForeignLayers: false
        foreignLayerUrlWhitelist: []
        indexType: "HUB"
        indexUrl: null
      format: docker
      httpClient:
        authentication: null
        autoBlock: true
        blocked: false
        connection:
          enableCircularRedirects: false
          enableCookies: false
          retries: null
          timeout: null
          useTrustStore: false
          userAgentSuffix: null
      name: dso-dockerhub-proxy
      negativeCache:
        enabled: true
        timeToLive: 1440
      online: true
      proxy:
        contentMaxAge: 1440
        metadataMaxAge: 1440
        remoteUrl: "https://registry-1.docker.io"
      routingRuleName: null
      storage:
        blobStoreName: dso
        strictContentTypeValidation: true
        writePolicy: ALLOW
      type: proxy
      url: "https://testcm-nexus.apps.c7.numerique-interieur.com/repository/dso-dockerhub-proxy"
    body_format: json
    status_code: [201]

- name: Set DockerToken as an active realm
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/security/realms/active
    method: PUT
    user: admin
    password: "{{ nexus_admin_password }}"
    body: [NexusAuthenticatingRealm, DockerToken]
    body_format: json
    status_code: [204]

- name: Activate Nexus metrics scraping
  when: dsc.global.metrics.enabled
  block:
    - name: Create admin-creds secret
      kubernetes.core.k8s:
        definition:
          kind: Secret
          apiVersion: v1
          data:
            username: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN | b64encode }}"
            password: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD | b64encode }}"
          metadata:
            labels:
              app: nexus
            name: admin-creds
            namespace: "{{ dsc.nexus.namespace }}"
          type: Opaque

    - name: Create nexus ServiceMonitor
      kubernetes.core.k8s:
        template: servicemonitor.yml.j2
