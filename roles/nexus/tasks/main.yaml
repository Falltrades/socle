- name: Create nexus Namespace
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        creationTimestamp: null
        name: "{{ dsc.nexus.namespace }}"

- name: Create nexus Service Account
  kubernetes.core.k8s:
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        name: nexus-sa
        namespace: "{{ dsc.nexus.namespace }}"

- name: Manage PVC
  ansible.builtin.include_tasks:
    file: manage-pvc.yaml

- name: Deploy nexus
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - nexus.yml.j2
    - ingress.yml.j2

- name: Find nexus admin password in inventory
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: ConfigMap
    name: dso-config
  register: ansible_inventory

- name: Cache admin password
  ansible.builtin.set_fact:
    nexus_admin_password: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD }}"
  register: set_nx_pass
  when: ansible_inventory.resources | length > 0 and ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD is defined

- name: Find password in container
  when: set_nx_pass.skipped is defined and set_nx_pass.skipped
  block:
    - name: Wait nexus to initialize
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ dsc.nexus.namespace }}"
        name: nexus
      register: endpoint
      until: endpoint.resources[0].subsets is defined and endpoint.resources[0].subsets | selectattr('addresses')
      retries: 30
      delay: 5

    - name: Get nexus pod's name
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ dsc.nexus.namespace }}"
        name: nexus
      register: nx_ep

    - name: Set nx_pod
      ansible.builtin.set_fact:
        nx_pod: "{{ nx_ep.resources[0].subsets[0].addresses[0].targetRef.name }}"

    - name: Récupération du compte admin
      kubernetes.core.k8s_exec:
        pod: "{{ nx_pod }}"
        namespace: "{{ dsc.nexus.namespace }}"
        command: cat /nexus-data/admin.password
      register: admin_account
      until: admin_account.stdout is defined and admin_account.stdout
      retries: 15
      delay: 12

    - name: Set nexus password from cat
      ansible.builtin.set_fact:
        nexus_admin_password: "{{ admin_account.stdout }}"

    - name: Generate random password
      ansible.builtin.set_fact:
        new_pass: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters') }}"

    - name: Change nexus password
      ansible.builtin.uri:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        force_basic_auth: true
        url: "https://{{ nexus_domain }}/service/rest/v1/security/users/admin/change-password"
        method: PUT
        user: admin
        password: "{{ nexus_admin_password }}"
        body: "{{ new_pass }}"
        body_format: raw
        headers:
          Content-Type: text/plain
        status_code: [204, 503]
      until: update_nexus_pass.status == 204
      register: update_nexus_pass
      retries: 10
      delay: 12

    - name: Update inventory
      kubernetes.core.k8s:
        kind: ConfigMap
        name: dso-config
        namespace: "{{ dsc.console.namespace }}"
        state: patched
        definition:
          data:
            NEXUS_ADMIN_PASSWORD: "{{ new_pass }}"

- name: Get inventory
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.console.namespace }}"
    kind: ConfigMap
    name: dso-config
  register: ansible_inventory

- name: Retrieve admin password from inventory
  ansible.builtin.set_fact:
    nexus_admin_password: "{{ ansible_inventory.resources[0].data.NEXUS_ADMIN_PASSWORD }}"
  register: get_nx_pass

- name: Get anonymous access settings
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: "https://{{ nexus_domain }}/service/rest/v1/security/anonymous"
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
    status_code: [200]
  register: anon_access

- name: Enable Anonymous access
  when: anon_access.json.enabled
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: "https://{{ nexus_domain }}/service/rest/v1/security/anonymous"
    method: PUT
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      enabled: true
      userId: "anonymous"
      realmName: "NexusAuthorizingRealm"
    body_format: json
    status_code: [200]

- name: Check if new-anon role already exists
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: "https://{{ nexus_domain }}/service/rest/v1/security/roles/new-anon"
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
    status_code: [200, 404]
  register: new_anon_role

- name: Create new-anon role
  when: (anon_access.json.enabled) and (new_anon_role.status == 404)
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: "https://{{ nexus_domain }}/service/rest/v1/security/roles"
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      id: "new-anon"
      name: "new-anon"
      description: "new-anon"
      privileges:
        - nx-repository-view-docker-*-browse
        - nx-repository-view-docker-*-read
      roles: []
    body_format: json
    status_code: [200]
  register: create_role

- name: Get anonymous user
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: "https://{{ nexus_domain }}/service/rest/v1/security/users?userId=anonymous&source=default"
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
    status_code: [200]
  register: anon_user

- name: Update anonymous user with new-anon role
  when: (anon_access.json.enabled) and (create_role is not failed) and not (anon_user.json[0].roles | regex_search('new-anon', multiline=True))
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: "https://{{ nexus_domain }}/service/rest/v1/security/users/anonymous"
    method: PUT
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      userId: "anonymous"
      firstName: "Anonymous"
      lastName: "User"
      emailAddress: "anonymous@example.org"
      source: "default"
      status: "active"
      readOnly: true
      roles:
        - new-anon
    body_format: json
    status_code: [204]
