expose:
  imagePullPolicy: IfNotPresent
  type: ingress
  tls:
{% if dsc.ingress.tls.type == 'none' %}
    enabled: false
{% else %}
    enabled: true
{% if dsc.ingress.tls.type == 'tlsSecret' %}
    certSource: secret
    secret:
      secretName: {{ dsc.ingress.tls.tlsSecret.name }}
      notarySecretName: {{ dsc.ingress.tls.tlsSecret.name }}-notary
{% else %}
    certSource: secret
    secret:
      secretName: harbor-ingress
      notarySecretName: harbor-ingress-notary
{% endif %}
{% endif %}
  ingress:
    className: {{ dsc.ingress.className | default('') }}
    hosts:
      core: {{ harbor_domain }}
      notary: {{ dsc.harbor.subDomain }}-notary{{ root_domain }}
    notary:
      annotations:
{% for key, val in dsc.ingress.annotations.items() %}
        {{ key }}: {{ val }}
{% endfor %}
      labels:
{% for key, val in dsc.ingress.labels.items() %}
        {{ key }}: {{ val }}
{% endfor %}
    harbor:
      annotations:
{% for key, val in dsc.ingress.annotations.items() %}
        {{ key }}: {{ val }}
{% endfor %}
      labels:
{% for key, val in dsc.ingress.labels.items() %}
        {{ key }}: {{ val }}
{% endfor %}
externalURL: https://{{ harbor_domain }}
persistence:
  enabled: true
  resourcePolicy: keep
  persistentVolumeClaim:
    registry:
      size: "{{ dsc.harbor.pvcRegistrySize }}"
    jobservice:
      jobLog:
        size: 5Gi
    database:
      size: 10Gi
    redis:
      size: 5Gi
    trivy:
      size: 10Gi
harborAdminPassword: "{{ dsc.harbor.adminPassword }}"
nginx:
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/nginx-photon
portal:
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/harbor-portal
core:
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/harbor-core
jobservice:
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/harbor-jobservice
registry:
  serviceAccountName: harbor-sa
  registry:
    image:
      repository: docker.io/goharbor/registry-photon
  controller:
    image:
      repository: docker.io/goharbor/harbor-registryctl
trivy:
  serviceAccountName: harbor-sa
  image:
    repository: docker.io/goharbor/trivy-adapter-photon
notary:
  server:
    serviceAccountName: harbor-sa
  signer:
    serviceAccountName: harbor-sa
database:
  internal:
    serviceAccountName: harbor-sa
    image:
      repository: docker.io/goharbor/harbor-db
redis:
  internal:
    serviceAccountName: harbor-sa
    image:
      repository: docker.io/goharbor/redis-photon
exporter:
  image:
    repository: docker.io/goharbor/harbor-exporter
