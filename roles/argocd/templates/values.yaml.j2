securityContext: &securityContext
  containerSecurityContext:
    runAsUser: null
  podSecurityContext:
    fsGroup: null

config:
{% if dsc.argocd.admin.enabled %}
  secret:
    argocdServerAdminPassword: "{{ dsc.argocd.admin.password }}"
{% endif %}
{% if dsc.exposedCA != 'none' %}
  tlsCerts:
    {{ gitlab_domain }}: |
      {{ exposed_ca_pem | indent(width=6, first=False) }}
{% endif %}
controller:
  <<: *securityContext
dex:
  enabled: false
server:
  <<: *securityContext
  ingress:
    ingressClassName: {{ dsc.ingress.className | default('') }}
  ingressGrpc:
    ingressClassName: {{ dsc.ingress.className | default('') }}
  insecure: true
  config:
    clusterResources: "true"
    url: "https://{{ argocd_domain }}"
    oidc.config: |
      issuer: https://{{ keycloak_domain }}/realms/dso
      requestedScopes: ["openid", "generic"]
      name: Keycloak
      clientID: {{ argocd_secret.resources[0].data.CLIENT_ID | b64decode }}
      clientSecret: {{ argocd_secret.resources[0].data.CLIENT_SECRET | b64decode }}
{% if dsc.exposedCA != 'none' %}
      rootCA: |
        {{ exposed_ca_pem | indent(width=8, first=False) }}
{% endif %}
    users.anonymous.enabled: "false"
    admin.enabled: "{{ dsc.argocd.admin.enabled }}"
    kustomize.buildOptions: "--enable-helm"
    resource.exclusions: |
      - apiGroups:
        - tekton.dev
        clusters:
        - '*'
        kinds:
        - TaskRun
        - PipelineRun
  extraEnvVars: []
repoServer:
  <<: *securityContext
  extraEnvVars: []
extraDeploy:
  - apiVersion: v1
    data:
      policy.csv: |
        p, role:admin, *, *, */*, allow
        p, role:nada, *, *, */*, deny
        g, system:cluster-admins, role:admin
        g, cluster-admins, role:admin
        g, /ArgoCDAdmins, role:admin
        g, ArgoCDAdmins, role:admin
      scopes: "[groups]"
      policy.default: role:nada
      admin.enabled: "false"
    kind: ConfigMap
    metadata:
      name: argocd-rbac-cm
      namespace: {{ dsc.argocd.namespace }}
applicationSet:
  webhook:
    ingress:
      ingressClassName: {{ dsc.ingress.className | default('') }}
notifications:
  webhook:
    ingress:
      ingressClassName: {{ dsc.ingress.className | default('') }}
