securityContext: &securityContext
  containerSecurityContext:
    runAsUser: null
    runAsGroup: null
    seLinuxOptions: null
  podSecurityContext:
    fsGroup: null

serviceMonitor: &serviceMonitor
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true
      namespace: "{{ dsc.argocd.namespace }}"

{% if private_image_repository is defined and private_image_repository != "" %}
image:
  registry: "{{ private_image_repository }}"
{% endif %}

config:
{% if dsc.argocd.admin.enabled %}
  secret:
    argocdServerAdminPassword: "{{ dsc.argocd.admin.password }}"
{% endif %}
  rbac:
    policy.csv: |
      p, role:admin, *, *, */*, allow
      p, role:nada, applicationsets, *, */*, deny
      p, role:nada, applications, *, */*, deny
      p, role:nada, logs, *, */*, deny
      p, role:nada, exec, *, */*, deny
      p, role:nada, certificates, *, *, deny
      p, role:nada, accounts, *, *, deny
      p, role:nada, gpgkeys, *, *, deny
      p, role:nada, projects, *, *, deny
      p, role:nada, clusters, *, *, deny
      p, role:nada, repositories, get, *, allow
      g, system:cluster-admins, role:admin
      g, cluster-admins, role:admin
      g, /ArgoCDAdmins, role:admin
      g, ArgoCDAdmins, role:admin
    scopes: "[groups]"
    policy.default: role:nada
    admin.enabled: "false"
redis:
{% if private_image_repository is defined and private_image_repository != "" %}
  image:
    registry: "{{ private_image_repository }}"
{% endif %}
  architecture: replication
{% if not cluster_k8s %}
  master:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
  replica:
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
{% endif %}
{% if dsc.global.metrics.enabled %}
  <<: *serviceMonitor
{% if not cluster_k8s %}
    podSecurityContext:
      enabled: false
    containerSecurityContext:
      enabled: false
{% endif %}
{% endif %}
controller:
{% if not cluster_k8s %}
  <<: *securityContext
{% endif %}
  replicaCount: 3
{% if dsc.global.metrics.enabled and not cluster_k8s %}
  <<: *serviceMonitor
{% endif %}
dex:
  enabled: false
server:
{% if not cluster_k8s %}
  <<: *securityContext
{% endif %}
  replicaCount: 3
  ingress:
    ingressClassName: {{ dsc.ingress.className | default('') }}
  ingressGrpc:
    ingressClassName: {{ dsc.ingress.className | default('') }}
  insecure: true
  config:
    clusterResources: "true"
    url: "https://{{ argocd_domain }}"
    oidc.config: |
      issuer: https://{{ keycloak_domain }}/realms/dso
      requestedScopes: ["openid", "generic"]
      name: Keycloak
      clientID: {{ argocd_secret.resources[0].data.CLIENT_ID | b64decode }}
      clientSecret: {{ argocd_secret.resources[0].data.CLIENT_SECRET | b64decode }}
{% if dsc.exposedCA.type != 'none' %}
      rootCA: |
        {{ exposed_ca_pem | indent(width=8, first=False) }}
{% endif %}
    users.anonymous.enabled: "false"
    admin.enabled: "{{ dsc.argocd.admin.enabled }}"
    kustomize.buildOptions: "--enable-helm"
    resource.exclusions: |
      - apiGroups:
        - tekton.dev
        clusters:
        - '*'
        kinds:
        - TaskRun
        - PipelineRun
  extraEnvVars: []
{% if dsc.global.metrics.enabled and not cluster_k8s %}
  <<: *serviceMonitor
{% endif %}
repoServer:
{% if not cluster_k8s %}
  <<: *securityContext
{% endif %}
  extraEnvVars: []
  replicaCount: 3
{% if dsc.global.metrics.enabled and not cluster_k8s %}
  <<: *serviceMonitor
{% endif %}
applicationSet:
  enabled: false
  replicaCount: 2
{% if not cluster_k8s %}
  <<: *securityContext
{% endif %}
  webhook:
    ingress:
      ingressClassName: {{ dsc.ingress.className | default('') }}
{% if dsc.global.metrics.enabled and not cluster_k8s %}
  <<: *serviceMonitor
{% endif %}
notifications:
  enabled: false
  webhook:
    ingress:
      ingressClassName: {{ dsc.ingress.className | default('') }}
{% if dsc.global.metrics.enabled %}
  <<: *serviceMonitor
{% endif %}
