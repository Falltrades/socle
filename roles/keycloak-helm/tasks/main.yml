- name: Create Keycloak namespace
  kubernetes.core.k8s:
    name: "{{ dsc.keycloak.namespace }}"
    api_version: v1
    kind: Namespace
    state: present

- name: Create PostgreSQL cluster and keycloak database
  kubernetes.core.k8s:
    template: pg-cluster-keycloak.yaml.j2

- name: Wait pg-cluster-keycloak-rw endpoint
  kubernetes.core.k8s_info:
    kind: Endpoints
    namespace: "{{ dsc.keycloak.namespace }}"
    name: pg-cluster-keycloak-rw
  register: endpoint
  until: endpoint.resources[0].subsets[0].addresses[0] is defined
  retries: 30
  delay: 5

- name: Wait job.batch/pg-cluster-keycloak-1-initdb to be terminated
  kubernetes.core.k8s_info:
    kind: Job
    api_version: batch/v1
    namespace: "{{ dsc.keycloak.namespace }}"
    name: pg-cluster-keycloak-1-initdb
  register: job1
  until: job1.resources | length == 0
  retries: 30
  delay: 5

- name: Wait job.batch/pg-cluster-keycloak-2-join to be terminated
  kubernetes.core.k8s_info:
    kind: Job
    api_version: batch/v1
    namespace: "{{ dsc.keycloak.namespace }}"
    name: pg-cluster-keycloak-2-join
  register: job2
  until: job2.resources | length == 0
  retries: 30
  delay: 5

- name: Get keycloak admin password secret
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: "keycloak"
  register: kc_adm_pass_secret

- name: Set keycloak admin password secret
  when: kc_adm_pass_secret.resources | length == 0
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        admin-password: "{{ lookup('password', '/dev/null length=24 chars=ascii_letters,digits')|b64encode }}"
      metadata:
        name: keycloak
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Add bitnami helm repo
  kubernetes.core.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami

- name: Set Keycloak helm values
  ansible.builtin.set_fact:
    kc_values: "{{ lookup('template', 'values.yaml.j2') | from_yaml }}"

- name: Merge with Keycloak user values
  ansible.builtin.set_fact:
    kc_values: "{{ kc_values | combine(dsc.keycloak['values'], recursive=True) }}"

- name: Deploy helm
  kubernetes.core.helm:
    name: keycloak
    chart_ref: bitnami/keycloak
    chart_version: "{{ dsc.keycloak.chartVersion }}"
    release_namespace: "{{ dsc.keycloak.namespace }}"
    values: "{{ kc_values }}"

- name: Wait Keycloak URL
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}"
    method: GET
    status_code: [200, 202]
    return_content: false
  register: kc_response
  until: kc_response is not failed
  retries: 30
  delay: 5

- name: Get keycloak admin password
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: "keycloak"
  register: kc_adm_pass

- name: Set keycloak admin ids facts
  ansible.builtin.set_fact:
    keycloak_admin_password: "{{ kc_adm_pass.resources[0].data['admin-password']|b64decode }}"
    keycloak_admin: "admin"

- name: Update console inventory
  kubernetes.core.k8s:
    kind: ConfigMap
    name: dso-config
    namespace: "{{ dsc.console.namespace }}"
    state: patched
    definition:
      data:
        KEYCLOAK_ADMIN_PASSWORD: "{{ keycloak_admin_password }}"
        KEYCLOAK_ADMIN: "{{ keycloak_admin }}"

- name: Get Keycloak API token
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}/realms/master/protocol/openid-connect/token"
    method: POST
    status_code: [200, 202]
    return_content: true
    body: "username={{ keycloak_admin }}&password={{ keycloak_admin_password }}&grant_type=password&client_id=admin-cli"
  register: kc_token

- name: Set kc_access_token fact
  ansible.builtin.set_fact:
    kc_access_token: "{{ kc_token.json.access_token }}"

- name: Get keycloak realms from API
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}/admin/realms"
    method: GET
    status_code: [200, 202]
    return_content: true
    body_format: json
    headers:
      Authorization: "bearer {{ kc_access_token }}"
  register: kc_realms

- name: Create dso realm
  when: kc_realms.json | selectattr('realm', 'equalto', 'dso') | length == 0
  community.general.keycloak_realm:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    id: dso
    realm: dso
    display_name: Dso Realm
    enabled: true

- name: Get keycloak dso realm users from API
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}/admin/realms/dso/users"
    method: GET
    status_code: [200, 202]
    return_content: true
    body_format: json
    headers:
      Authorization: "bearer {{ kc_access_token }}"
  register: kc_dso_users

- name: Find dso admin password
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.keycloak.namespace }}"
    kind: Secret
    name: dso-admin-user-secret
  register: dso_admin

- name: Create dso admin secret and user
  when: (dso_admin.resources | length == 0) or (kc_dso_users.json | selectattr('username', 'equalto', 'admin@example.com') | length == 0)
  block:
    - name: Generate admin user password
      ansible.builtin.set_fact:
        admin_user_password: "{{ lookup('password', '/dev/null length=16 chars=ascii_letters,digits') }}"

    - name: Create dso secret
      kubernetes.core.k8s:
        definition:
          kind: Secret
          metadata:
            namespace: "{{ dsc.keycloak.namespace }}"
            name: dso-admin-user-secret
          data:
            ADMIN_USER_PASSWORD: "{{ admin_user_password | b64encode }}"
          type: Opaque

    - name: Remove dso admin user
      community.general.keycloak_user:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        auth_client_id: admin-cli
        auth_keycloak_url: https://{{ keycloak_domain }}
        auth_realm: master
        auth_username: "{{ keycloak_admin }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: absent
        realm: dso
        username: admin@example.com

    - name: Create dso admin user
      community.general.keycloak_user:
        validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
        auth_client_id: admin-cli
        auth_keycloak_url: https://{{ keycloak_domain }}
        auth_realm: master
        auth_username: "{{ keycloak_admin }}"
        auth_password: "{{ keycloak_admin_password }}"
        state: present
        realm: dso
        credentials:
            - temporary: false
              type: password
              value: "{{ admin_user_password }}"
        username: admin@example.com
        first_name: Admin
        last_name: Admin
        email: admin@example.com
        enabled: true
        email_verified: true
#        force: true  ## Ne fontionne pas quand user supprim√© via la GUI.

- name: Get dso keycloak client scopes from API
  ansible.builtin.uri:
    url: "https://{{ keycloak_domain }}/admin/realms/dso/client-scopes"
    method: GET
    status_code: [200, 202]
    return_content: true
    body_format: json
    headers:
      Authorization: "bearer {{ kc_access_token }}"
  register: kc_client_scopes

- name: Create generic keycloak client scope
  when: kc_client_scopes.json | selectattr('name', 'equalto', 'generic') | length == 0
  community.general.keycloak_clientscope:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    name: generic
    realm: dso
    description: Generic client scope
    protocol: openid-connect
    attributes:
      include.in.token.scope: true
      display.on.consent.screen: true
      gui.order: ''
      consent.screen.text: ''
    protocolMappers: "{{ lookup('ansible.builtin.file', 'generic-client-scope-protocolMappers.yaml') | from_yaml }}"

- name: Create gitlab-client
  community.general.keycloak_client:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    clientId: gitlab-client
    clientAuthenticatorType: client-secret
    standardFlowEnabled: true
    redirectUris:
      - https://{{ gitlab_domain }}/users/auth/openid_connect/callback
    webOrigins:
      - https://{{ gitlab_domain }}
    defaultClientScopes:
      - generic

- name: Get gitlab-client secret from keycloak
  community.general.keycloak_clientsecret_info:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: dso
    clientId: gitlab-client
  register: gitlab_client_secret
  no_log: true

- name: Set gitlab-client secret in keycloak namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        CLIENT_ID: "{{ 'gitlab-client'|b64encode }}"
        CLIENT_SECRET: "{{ gitlab_client_secret.clientsecret_info.value|b64encode }}"
      metadata:
        name: keycloak-client-secret-gitlab-client
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Create console-frontend client
  community.general.keycloak_client:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    clientId: console-frontend
    standardFlowEnabled: true
    publicClient: true
    redirectUris: "{{ lookup('ansible.builtin.template', 'console-frontend-redirectUris.yaml') | from_yaml }}"
    webOrigins: "{{ lookup('ansible.builtin.template', 'console-frontend-webOrigins.yaml') | from_yaml }}"
    defaultClientScopes:
      - generic

- name: Get console-frontend client secret from keycloak
  community.general.keycloak_clientsecret_info:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: dso
    clientId: console-frontend
  register: console_frontend_client_secret
  no_log: true

- name: Set console-frontend client secret in keycloak namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        CLIENT_ID: "{{ 'console-frontend'|b64encode }}"
        CLIENT_SECRET: ""
      metadata:
        name: keycloak-client-secret-console-frontend-client
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Create console-backend client
  community.general.keycloak_client:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    clientId: console-backend
    clientAuthenticatorType: client-secret
    standardFlowEnabled: true
    redirectUris:
      - https://{{ console_domain }}/*
      - https://{{ console_domain }}/
    webOrigins:
      - https://{{ console_domain }}
    defaultClientScopes:
      - generic

- name: Get console-backend client secret from keycloak
  community.general.keycloak_clientsecret_info:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: dso
    clientId: console-backend
  register: console_backend_client_secret
  no_log: true

- name: Set console-backend client secret in keycloak namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        CLIENT_ID: "{{ 'console-backend'|b64encode }}"
        CLIENT_SECRET: "{{ console_backend_client_secret.clientsecret_info.value|b64encode }}"
      metadata:
        name: keycloak-client-secret-console-backend-client
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Create argo-client
  community.general.keycloak_client:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    clientId: argo-client
#    secret: 810f6a26-173a-4fdc-b080-15357ff9ed36
    clientAuthenticatorType: client-secret
    standardFlowEnabled: true
    redirectUris:
      - https://{{ argocd_domain }}/auth/callback
      - "*"
    webOrigins:
      - https://{{ argocd_domain }}
    defaultClientScopes:
      - generic

- name: Get argo-client secret from keycloak
  community.general.keycloak_clientsecret_info:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: dso
    clientId: argo-client
  register: argo_client_secret
  no_log: true

- name: Set argo-client secret in keycloak namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        CLIENT_ID: "{{ 'argo-client'|b64encode }}"
        CLIENT_SECRET: "{{ argo_client_secret.clientsecret_info.value|b64encode }}"
      metadata:
        name: keycloak-client-secret-argo-client
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Create portail-client
  community.general.keycloak_client:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    clientId: portail-client
#    clientAuthenticatorType: public
    clientAuthenticatorType: client-secret
    redirectUris:
      - "*"
    webOrigins:
      - "*"
    defaultClientScopes:
      - generic

- name: Get portail-client secret from keycloak
  community.general.keycloak_clientsecret_info:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: dso
    clientId: portail-client
  register: portail_client_secret
  no_log: true

- name: Set portail-client secret in keycloak namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        CLIENT_ID: "{{ 'portail-client'|b64encode }}"
        CLIENT_SECRET: "{{ portail_client_secret.clientsecret_info.value|b64encode }}"
      metadata:
        name: keycloak-client-secret-portail-client
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Create sonar-client
  community.general.keycloak_client:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    clientId: sonar-client
#    secret: 3c6ec656-defe-4fa3-be05-a24460ec97eb
    clientAuthenticatorType: client-secret
    standardFlowEnabled: true
    redirectUris:
      - https://{{ sonar_domain }}/auth/callback
    webOrigins:
      - https://{{ sonar_domain }}
    defaultClientScopes:
      - generic

- name: Get sonar-client secret from keycloak
  community.general.keycloak_clientsecret_info:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: dso
    clientId: sonar-client
  register: sonar_client_secret
  no_log: true

- name: Set sonar-client secret in keycloak namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        CLIENT_ID: "{{ 'sonar-client'|b64encode }}"
        CLIENT_SECRET: "{{ sonar_client_secret.clientsecret_info.value|b64encode }}"
      metadata:
        name: keycloak-client-secret-sonar-client
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Create harbor-client
  community.general.keycloak_client:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    clientId: harbor-client
#    secret: 4474aa7f-e392-4481-9c47-5891c8970ac8
    clientAuthenticatorType: client-secret
    standardFlowEnabled: true
    redirectUris:
      - https://{{ harbor_domain }}/c/oidc/callback
    webOrigins:
      - https://{{ harbor_domain }}
    defaultClientScopes:
      - generic

- name: Get harbor-client secret from keycloak
  community.general.keycloak_clientsecret_info:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    realm: dso
    clientId: harbor-client
  register: harbor_client_secret
  no_log: true

- name: Set harbor-client secret in keycloak namespace
  kubernetes.core.k8s:
    state: present
    definition:
      apiVersion: v1
      kind: Secret
      data:
        CLIENT_ID: "{{ 'harbor-client'|b64encode }}"
        CLIENT_SECRET: "{{ harbor_client_secret.clientsecret_info.value|b64encode }}"
      metadata:
        name: keycloak-client-secret-harbor-client
        namespace: "{{ dsc.keycloak.namespace }}"
      type: Opaque

- name: Create base admins groups
  community.general.keycloak_group:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    auth_client_id: admin-cli
    auth_keycloak_url: https://{{ keycloak_domain }}
    auth_realm: master
    auth_username: "{{ keycloak_admin }}"
    auth_password: "{{ keycloak_admin_password }}"
    state: present
    realm: dso
    name: "{{ item }}"
  with_items:
    - admin
    - ArgoCDAdmins
