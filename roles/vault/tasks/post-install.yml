- name: Wait vault container
  kubernetes.core.k8s:
    kind: Pod
    name: "{{ dsc_name }}-vault-0"
    namespace: "{{ dsc.vault.namespace }}"
    wait: true
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      reason:
      type: Initialized
      status: "True"

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.vault.namespace }}"
    kind: Secret
    name: "{{ dsc_name }}-vault-keys"
  register: vault_keys

# Check vault status
- name: Check vault status - node 1
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-0"

- name: Check if vault is coherent
  ansible.builtin.assert:
    that:
      - ((vault_status in ['sealed', 'OK']) and (vault_keys.resources | length > 0)) or ((vault_status == 'not init') and (vault_keys.resources | length == 0))
    fail_msg:
      - Attention ! Soit le vault n'est pas initialisé mais vous avez un secret vault-keys dans {{ dsc.vault.namespace }}
      - Veuillez le suppripmer et relancer si vous souhaitez lancer une initialisation
      - Soit le vault est initialisé mais vous n'avez pas de secret vault-keys dans {{ dsc.vault.namespace }}, et c'est inquiétant !

# Init vault node 1
- name: Init vault node - node 1
  kubernetes.core.k8s_exec:
    container: vault
    pod: "{{ dsc_name }}-vault-0"
    namespace: "{{ dsc.vault.namespace }}"
    command: vault operator init -key-shares=3 -key-threshold=2 -format=json
  register: init
  until: "init is not failed"
  retries: 3
  delay: 20
  when: vault_status == 'not init'

- name: Store vault keys
  kubernetes.core.k8s:
    definition:
      kind: Secret
      metadata:
        name: "{{ dsc_name }}-vault-keys"
        namespace: "{{ dsc.vault.namespace }}"
      data:
        key1: "{{ init.stdout | from_json | json_query('unseal_keys_b64[0]') | b64encode }}"
        key2: "{{ init.stdout | from_json | json_query('unseal_keys_b64[1]') | b64encode }}"
        key3: "{{ init.stdout | from_json | json_query('unseal_keys_b64[2]') | b64encode }}"
        root_token: "{{ init.stdout | from_json | json_query('root_token') | b64encode }}"
        init_config: "{{ init.stdout | from_json | b64encode }}"
  when: vault_keys.resources | length == 0

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.vault.namespace }}"
    kind: Secret
    name: "{{ dsc_name }}-vault-keys"
  register: vault_keys

- name: Set fact for vault secrets
  ansible.builtin.set_fact:
    vault_token: "{{ vault_keys.resources[0].data.rootToken | b64decode }}"

# Unseal vault node 1
- name: Set seal count - node 1
  ansible.builtin.set_fact:
    vault_pod: "{{ dsc_name }}-vault-0"
    unsealKeyNb: "0"

- name: Unseal vault primary - node 1
  ansible.builtin.include_tasks: unseal.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-0"
  when: vault_status == 'not init' or vault_status == 'sealed'

# Init vault node 2
- name: Check vault status - node 2
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-1"

- name: Init vault node - node 2
  kubernetes.core.k8s_exec:
    container: vault
    pod: "{{ dsc_name }}-vault-1"
    namespace: "{{ dsc.vault.namespace }}"
    command: vault operator raft join http://"{{ dsc_name }}-vault-0".vault-internal:8200
  retries: 3
  delay: 20
  when: vault_status == 'not init'

# Init node 3
- name: Check vault status - node 3
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-2"

- name: Init vault node - node 3
  kubernetes.core.k8s_exec:
    container: vault
    pod: "{{ dsc_name }}-vault-2"
    namespace: "{{ dsc.vault.namespace }}"
    command: vault operator raft join http://"{{ dsc_name }}-vault-0".vault-internal:8200
  retries: 3
  delay: 20
  when: vault_status == 'not init'

# Unseal node 2
- name: Check vault status - node 2
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-1"

- name: Set seal count - node 2
  ansible.builtin.set_fact:
    vault_pod: "{{ dsc_name }}-vault-1"
    unsealKeyNb: "0"

- name: Unseal vault node - node 2
  ansible.builtin.include_tasks: unseal.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-1"
  when: vault_status == 'not init' or vault_status == 'sealed'

# Unseal node 3
- name: Check vault status - node 2
  ansible.builtin.include_tasks: check.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-2"

- name: Set seal count - node 3
  ansible.builtin.set_fact:
    vault_pod: "{{ dsc_name }}-vault-2"
    unsealKeyNb: "0"

- name: Unseal vault node - node 3
  ansible.builtin.include_tasks: unseal.yml
  vars:
    vault_pod: "{{ dsc_name }}-vault-2"
  when: vault_status == 'not init' or vault_status == 'sealed'

# Create kv engine
- name: Get kv engines
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    method: GET
    url: "https://{{ vault_domain }}/v1/sys/mounts/forge-dso"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
  register: get_engines

- name: Create default 'forge-dso/' kv engine
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/sys/mounts/forge-dso"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ vault_token }}"
    body:
      type: kv
      options:
        version: 2
    body_format: json
  when: get_engines.status == 400

# Service monitor
- name: Patch ServiceMonitor
  when: dsc.global.metrics.enabled
  kubernetes.core.k8s:
    api_version: monitoring.coreos.com/v1
    kind: ServiceMonitor
    namespace: "{{ dsc.vault.namespace }}"
    name: "{{ dsc_name }}-vault"
    state: patched
    definition:
      spec:
        endpoints:
          - bearerTokenSecret:
              key: root_token
              name: "{{ dsc_name }}-vault-keys"
            interval: 30s
            params:
              format:
                - prometheus
            path: /v1/sys/metrics
            port: http
            scheme: http
            scrapeTimeout: 10s
            tlsConfig:
              insecureSkipVerify: true