- name: Create Vault namespace
  kubernetes.core.k8s:
    state: present
    kind: namespace
    name: "{{ dsc.vault.namespace }}"
    api_version: v1

- name: Add helm repo
  kubernetes.core.helm_repository:
    name: hashicorp
    repo_url: https://helm.releases.hashicorp.com

- name: Set values
  ansible.builtin.set_fact:
    values:
      global:
        openshift: true
      injector:
        image:
          repository: docker.io/hashicorp/vault-k8s
        agentImage:
          repository: docker.io/hashicorp/vault
      server:
        route:
          enabled: false
        ha:
          enabled: false
        standalone:
          enabled: true
        auditStorage:
          enable: true
        dataStorage:
          enable: true
          size: 23Gi
        image:
          repository: docker.io/hashicorp/vault
      csi:
        image:
          repository: docker.io/hashicorp/vault-csi-provider
        agent:
          image:
            repository: docker.io/hashicorp/vault

- name: Set proxy_fact
  ansible.builtin.set_fact:
    proxy_fact:
      server:
        extraEnvironmentVars:
          HTTP_PROXY: "{{ dsc.proxy.http_proxy }}"
          HTTPS_PROXY: "{{ dsc.proxy.https_proxy }}"
          NO_PROXY: "{{ dsc.proxy.no_proxy }}"
  when: dsc.proxy.enabled

- name: Set extraEnv
  when: dsc.proxy.enabled
  ansible.builtin.set_fact:
    values: "{{ values | combine(proxy_fact, recursive=True) }}"

- name: Set Vault values
  ansible.builtin.set_fact:
    values: "{{ values | combine(dsc.vault['values'], recursive=True) }}"

- name: Deploy helm
  kubernetes.core.helm:
    name: "{{ dsc_name }}-vault"
    chart_ref: hashicorp/vault
    chart_version: "{{ dsc.vault.chartVersion }}"
    release_namespace: "{{ dsc.vault.namespace }}"
    create_namespace: true
    values: "{{ values }}"

- name: Create route and certs
  kubernetes.core.k8s:
    template: "{{ item }}"
  with_items:
    - ingress.yaml.j2

- name: Wait vault container
  kubernetes.core.k8s:
    kind: Pod
    name: "{{ dsc_name }}-vault-0"
    namespace: "{{ dsc.vault.namespace }}"
    wait: true
    wait_sleep: 10
    wait_timeout: 600
    wait_condition:
      reason:
      type: Initialized
      status: "True"

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.vault.namespace }}"
    kind: Secret
    name: "{{ dsc_name }}-vault-keys"
  register: vault_keys

- name: Check Vault health
  ansible.builtin.include_tasks:
    file: check.yml

- name: Check if vault is coherent
  ansible.builtin.assert:
    that:
      - ((vault_status in ['sealed', 'OK']) and (vault_keys.resources | length > 0)) or ((vault_status == 'not init') and (vault_keys.resources | length == 0))
    fail_msg:
      - "Attention ! Soit le vault n'est pas initialisé mais vous avez un secret vault-keys dans {{ dsc.vault.namespace }}"
      - "Veuillez le suppripmer et relancer si vous souhaitez lancer une initialisation"
      - "Soit le vault est initialisé mais vous n'avez pas de secret vault-keys dans {{ dsc.vault.namespace }}, et c'est inquiétant !"

- name: Init vault
  kubernetes.core.k8s_exec:
    container: vault
    pod: "{{ dsc_name }}-vault-0"
    namespace: "{{ dsc.vault.namespace }}"
    command: vault operator init -key-shares=3 -key-threshold=2
  when: vault_status == 'not init'
  register: init
  until: "init is not failed"
  retries: 1
  delay: 10

- name: Store vault keys
  kubernetes.core.k8s:
    definition:
      kind: Secret
      metadata:
        name: "{{ dsc_name }}-vault-keys"
        namespace: "{{ dsc.vault.namespace }}"
      data:
        key1: "{{ init.stdout_lines[0] | regex_replace('^Unseal Key 1: (.*)$', '\\1', multiline=True) | b64encode }}"
        key2: "{{ init.stdout_lines[1] | regex_replace('^Unseal Key 2: (.*)$', '\\1', multiline=True) | b64encode }}"
        key3: "{{ init.stdout_lines[2] | regex_replace('^Unseal Key 3: (.*)$', '\\1', multiline=True) | b64encode }}"
        root_token: "{{ init.stdout_lines[4] | regex_replace('^Initial Root Token: (.*)$', '\\1', multiline=True) | b64encode }}"
  when: vault_keys.resources | length == 0

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.vault.namespace }}"
    kind: Secret
    name: "{{ dsc_name }}-vault-keys"
  register: vault_keys

- name: Update inventory
  kubernetes.core.k8s:
    kind: ConfigMap
    name: dso-config
    namespace: "{{ dsc.console.namespace }}"
    state: patched
    definition:
      data:
        VAULT_TOKEN: "{{ vault_keys.resources[0].data.root_token | b64decode }}"

- name: Set fact root_token
  ansible.builtin.set_fact:
    root_token: "{{ vault_keys.resources[0].data.root_token | b64decode }}"

- name: Check Vault health
  ansible.builtin.include_tasks:
    file: check.yml

- name: Set fact to unseal vault
  ansible.builtin.set_fact:
    num: "1"

- name: Unseal vault
  when: vault_status == 'sealed'
  ansible.builtin.include_tasks:
    file: unseal.yml

- name: "Config: get auth method"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/sys/auth/jwt"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ root_token }}"
  register: jwt_state
  retries: 5

- name: "Config: set auth method"
  when: jwt_state.status == 400
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/sys/auth/jwt"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ root_token }}"
    body:
      type: jwt
      description: Login for Gitlab-ci
    body_format: json

- name: "Config: add role default-ci"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/auth/jwt/role/default-ci"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ root_token }}"
      Content-Type: application/json
    body:
      role_type: jwt
      policies:
        - default-ci
      token_explicit_max_ttl: 60
      bound_claims_type: glob
      user_claim: user_email
      bound_claims:
        iss: "{{ gitlab_domain }}"
      claim_mappings:
        namespace_path: namespace_path
        project_path: project_path
        project_id: project_id
        ref: ref
    body_format: json

- name: "Config: set jwt config"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/auth/jwt/config"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ root_token }}"
    body:
      oidc_discovery_url: "https://{{ gitlab_domain }}"
      oidc_discovery_ca_pem: "{{ exposed_ca_pem }}"
      default_role: default-ci
    body_format: json

- name: "Config: get accessor jwt config"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/sys/auth/jwt"
    status_code: [200]
    headers:
      "X-Vault-Token": "{{ root_token }}"
  register: get_accessor

- name: "Config: create policy"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/sys/policy/default-ci"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ root_token }}"
    body:
      policy: |
        path "forge-dso/+/{{ '{{' }}identity.entity.aliases.{{ get_accessor.json.accessor }}.metadata.namespace_path{{ '}}' }}/*" {
          capabilities = ["list","read"]
        }
        path "forge-dso/+/{{ '{{' }}identity.entity.aliases.{{ get_accessor.json.accessor }}.metadata.namespace_path{{ '}}' }}" {
          capabilities = ["list","read"]
        }
    body_format: json

- name: "Config: get kv engines"
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/sys/mounts/forge-dso"
    status_code: [200, 400]
    headers:
      "X-Vault-Token": "{{ root_token }}"
  register: get_engines

- name: "Config: create kv engine"
  when: get_engines.status == 400
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    url: "https://{{ vault_domain }}/v1/sys/mounts/forge-dso"
    method: POST
    status_code: [204]
    headers:
      "X-Vault-Token": "{{ root_token }}"
    body:
      type: kv
      options:
        version: 2
    body_format: json
