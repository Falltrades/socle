---
- name: Find Vault pod
  kubernetes.core.k8s_info:
    kind: Pod
    namespace: "{{ dsc.vault.namespace }}"
    label_selectors:
      - app.kubernetes.io/instance={{ dsc_name }}-vault
      - app.kubernetes.io/name=vault
      - component=server
  register: vault_pod

- name: Find vault keys
  kubernetes.core.k8s_info:
    namespace: "{{ dsc.vault.namespace }}"
    kind: Secret
    name: "{{ dsc_name }}-vault-keys"
  register: vault_keys

- name: Check health and unseal if necessary
  when: (vault_pod.resources | length > 0) and (vault_keys.resources | length > 0)
  block:
    - name: Update inventory
      kubernetes.core.k8s:
        kind: ConfigMap
        name: dso-config
        namespace: "{{ dsc.console.namespace }}"
        state: patched
        definition:
          data:
            VAULT_TOKEN: "{{ vault_keys.resources[0].data.root_token | b64decode }}"

    - name: Set fact root_token
      ansible.builtin.set_fact:
        root_token: "{{ vault_keys.resources[0].data.root_token | b64decode }}"

    - name: Check Vault health
      ansible.builtin.include_tasks:
        file: check.yml

    - name: Set fact to unseal vault
      ansible.builtin.set_fact:
        num: "1"

    - name: Unseal vault
      when: vault_status == 'sealed'
      ansible.builtin.include_tasks:
        file: unseal.yml

    - name: Wait vault pod to be ready
      kubernetes.core.k8s_info:
        namespace: "{{ dsc.vault.namespace }}"
        kind: Pod
        name: "{{ dsc_name }}-vault-0"
      register: vault_pod
      until: >
        (vault_pod.resources[0].status.conditions is defined) and (vault_pod.resources[0].status.conditions |
        selectattr('status', 'equalto', 'True') | selectattr('type', 'equalto', 'Ready'))
      retries: 15
      delay: 5
