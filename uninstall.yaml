- name: Désinstallation du socle DSO
  hosts: localhost
  gather_facts: false

#  roles:
#    - name: socle-config
#      tags:
#        - always

#  post_tasks:

  tasks:

    - name: "Get socle config from conf-dso dsc (default)"
      kubernetes.core.k8s_info:
        kind: dsc
        name: conf-dso
        api_version: cloud-pi-native.fr/v1alpha
      register: socle_config
      tags:
        - always

    - name: Get socle config from dsc_cr extra var when defined
      kubernetes.core.k8s_info:
        kind: dsc
        name: "{{ dsc_cr }}"
        api_version: cloud-pi-native.fr/v1alpha
      register: socle_config_custom
      when: dsc_cr is defined
      tags:
        - always

    - name: Check socle_config_custom and exit if empty
      when: (dsc_cr is defined) and (socle_config_custom.resources | length == 0)
      block:
        - name: Warning message
          ansible.builtin.debug:
            msg:
              - "Attention ! Vous avez lancé le playbook avec l'option '-e dsc_cr={{ dsc_cr }}'"
              - "mais la ressource dsc nommée '{{ dsc_cr }}' est vide ou inexistante côté cluster !"
              - ""
              - "Vérifiez que vous ne vous êtes pas trompé de nom et que la ressource existe bien, via la commande suivante :"
              - ""
              - " kubectl get dsc {{ dsc_cr }} "
              - ""
              - "Si elle n'est pas trouvée (not found), listez simplement les resources dsc actuellement déclarées :"
              - ""
              - " kubectl get dsc "
              - ""
              - "Puis relancez le playbook avec une resource dsc existante."
              - ""
              - "Rappel : le présent playbook lancé seul, sans extra vars, procédera à des désinstallations d'outils,"
              - "ou de la chaîne DSO complète, en s'appuyant sur les namespaces déclarés dans le dsc par défaut (conf-dso)."

        - name: Exit playbook
          ansible.builtin.meta: end_play

    - name: Set socle_config fact when dsc_cr defined and not empty
      ansible.builtin.set_fact:
        socle_config: "{{ socle_config_custom }}"
      when: (socle_config_custom is not skipped) and (socle_config_custom.resources | length > 0)
      tags:
        - always

    - name: Set DSC Name fact
      ansible.builtin.set_fact:
        dsc_name: "{{ socle_config.resources[0].metadata.name }}"
      tags:
        - always

    - name: Set DSC fact
      ansible.builtin.set_fact:
        dsc: "{{ socle_config.resources[0].spec }}"
      tags:
        - always

    - name: Désinstallation de Kubed
      kubernetes.core.helm:
        name: kubed
        chart_ref: appscode/kubed
        release_namespace: openshift-infra
        state: absent
        wait: true
      tags:
        - never
        - confSyncer
        - kubed

    - name: Récupérations des clients Keycloak
      kubernetes.core.k8s_info:
        api_version: keycloak.org/v1alpha1
        kind: KeycloakClient
        namespace: "{{ dsc.keycloak.namespace }}"
      register: keycloak_clients
      tags:
        - keycloak

    - name: Patch des clients Keycloak (finalizers)
      kubernetes.core.k8s:
        state: patched
        api_version: keycloak.org/v1alpha1
        kind: KeycloakClient
        name: "{{ item.metadata.name }}"
        namespace: "{{ dsc.keycloak.namespace }}"
        definition:
          metadata:
            finalizers: []
      with_items: "{{ keycloak_clients.resources }}"
      tags:
        - keycloak

    - name: Suppression des clients Keycloak
      kubernetes.core.k8s:
        state: absent
        api_version: keycloak.org/v1alpha1
        kind: KeycloakClient
        name: "{{ item.metadata.name }}"
        namespace: "{{ dsc.keycloak.namespace }}"
      with_items: "{{ keycloak_clients.resources }}"
      tags:
        - keycloak

    - name: Patch des ressources Keycloak (finalizers)
      kubernetes.core.k8s:
        state: patched
        api_version: keycloak.org/v1alpha1
        kind: "{{ item.kind }}"
        name: "{{ item.name }}"
        namespace: "{{ dsc.keycloak.namespace }}"
        definition:
          metadata:
            finalizers: []
      with_items:
        - kind: KeycloakRealm
          name: dso-realm
        - kind: KeycloakUser
          name: admin-gitlab
      tags:
        - keycloak

    - name: Suppression des ressources Keycloak
      kubernetes.core.k8s:
        state: absent
        api_version: keycloak.org/v1alpha1
        kind: "{{ item.kind }}"
        name: "{{ item.name }}"
        namespace: "{{ dsc.keycloak.namespace }}"
      with_items:
        - kind: KeycloakRealm
          name: dso-realm
        - kind: KeycloakUser
          name: admin-gitlab
      tags:
        - keycloak

    - name: Suppression du namespace Keycloak
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.keycloak.namespace }}"
      tags:
        - keycloak

    - name: Suppression du namespace Nexus
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.nexus.namespace }}"
      tags:
        - nexus

    - name: Suppression du namespace Sonarqube
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.sonarqube.namespace }}"
      tags:
        - sonarqube

    - name: Suppression du gitlab runner
      kubernetes.core.k8s:
        state: absent
        api_version: apps.gitlab.com/v1beta2
        kind: Runner
        name: gitlab-runner
        namespace: "{{ dsc.gitlab.namespace }}"
      tags:
        - gitlab-runner
        - gitlab

    - name: Suppression du namespace GitLab
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.gitlab.namespace }}"
      tags:
        - gitlab

    - name: Suppression du namespace Vault
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.vault.namespace }}"
      tags:
        - vault

    - name: Suppression du namespace SOPS
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.sops.namespace }}"
      tags:
        - sops

    - name: Suppression du namespace ArgoCD
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.argocd.namespace }}"
      tags:
        - argocd
        - argo
        - gitops

    - name: Suppression du namespace Harbor
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.harbor.namespace }}"
      tags:
        - harbor
        - registry

    - name: Suppression du namespace Console
      kubernetes.core.k8s:
        state: absent
        kind: Namespace
        name: "{{ dsc.console.namespace }}"
      tags:
        - console-dso
        - console
